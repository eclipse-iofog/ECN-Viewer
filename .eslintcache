[{"/Users/tianxingyu/ecn3/ECN-Viewer/src/index.js":"1","/Users/tianxingyu/ecn3/ECN-Viewer/src/serviceWorker.js":"2","/Users/tianxingyu/ecn3/ECN-Viewer/src/App.js":"3","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/FeedbackContext.js":"4","/Users/tianxingyu/ecn3/ECN-Viewer/src/Theme/ThemeProvider.js":"5","/Users/tianxingyu/ecn3/ECN-Viewer/src/Layout/index.js":"6","/Users/tianxingyu/ecn3/ECN-Viewer/src/ControllerProvider/index.js":"7","/Users/tianxingyu/ecn3/ECN-Viewer/src/providers/Data/index.js":"8","/Users/tianxingyu/ecn3/ECN-Viewer/src/providers/Config/index.js":"9","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/Alert.js":"10","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/Modal.js":"11","/Users/tianxingyu/ecn3/ECN-Viewer/src/providers/Data/agent-manager.js":"12","/Users/tianxingyu/ecn3/ECN-Viewer/src/providers/Data/application-manager.js":"13","/Users/tianxingyu/ecn3/ECN-Viewer/src/hooks/useInterval.js":"14","/Users/tianxingyu/ecn3/ECN-Viewer/src/Catalog/index.js":"15","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/index.js":"16","/Users/tianxingyu/ecn3/ECN-Viewer/src/Config/index.js":"17","/Users/tianxingyu/ecn3/ECN-Viewer/src/providers/Map/index.js":"18","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Navigation.js":"19","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Map.js":"20","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/MicroserviceDetails/index.js":"21","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/ApplicationDetails/index.js":"22","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/AgentDetails/index.js":"23","/Users/tianxingyu/ecn3/ECN-Viewer/src/Catalog/Application/index.js":"24","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Default/index.js":"25","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/utils.js":"26","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/SearchBar.js":"27","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/ApplicationParser.js":"28","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/constants.js":"29","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/Tabs.js":"30","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/FileDrop.js":"31","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Default/ActiveResources.js":"32","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/Status.js":"33","/Users/tianxingyu/ecn3/ECN-Viewer/src/Catalog/Application/DeployApplicationTemplate.js":"34","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/Confirm.js":"35","/Users/tianxingyu/ecn3/ECN-Viewer/src/Catalog/Application/CatalogTable.js":"36","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/ReactJson.js":"37","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/AgentDetails/EdgeResourceDetails.js":"38","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/sharedStyles/index.js":"39","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Default/ApplicationList/index.js":"40","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Default/AgentList/index.js":"41","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/MicroservicesTable/index.js":"42","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/myleaflet.js":"43"},{"size":445,"mtime":1616402548507,"results":"44","hashOfConfig":"45"},{"size":4948,"mtime":1616402548510,"results":"46","hashOfConfig":"45"},{"size":994,"mtime":1616402548494,"results":"47","hashOfConfig":"45"},{"size":2426,"mtime":1616402548505,"results":"48","hashOfConfig":"45"},{"size":954,"mtime":1616402548504,"results":"49","hashOfConfig":"45"},{"size":4917,"mtime":1619492991632,"results":"50","hashOfConfig":"45"},{"size":5457,"mtime":1616402548497,"results":"51","hashOfConfig":"45"},{"size":4813,"mtime":1616402548509,"results":"52","hashOfConfig":"45"},{"size":2283,"mtime":1616402548508,"results":"53","hashOfConfig":"45"},{"size":2437,"mtime":1616402548504,"results":"54","hashOfConfig":"45"},{"size":2573,"mtime":1616402548505,"results":"55","hashOfConfig":"45"},{"size":418,"mtime":1616402548508,"results":"56","hashOfConfig":"45"},{"size":805,"mtime":1616402548509,"results":"57","hashOfConfig":"45"},{"size":849,"mtime":1616402548507,"results":"58","hashOfConfig":"45"},{"size":609,"mtime":1616402548496,"results":"59","hashOfConfig":"45"},{"size":4956,"mtime":1619504717094,"results":"60","hashOfConfig":"45"},{"size":6040,"mtime":1616402548496,"results":"61","hashOfConfig":"45"},{"size":2408,"mtime":1616566924505,"results":"62","hashOfConfig":"45"},{"size":3557,"mtime":1616402548501,"results":"63","hashOfConfig":"45"},{"size":4322,"mtime":1619510603564,"results":"64","hashOfConfig":"45"},{"size":15730,"mtime":1616402548500,"results":"65","hashOfConfig":"45"},{"size":13871,"mtime":1619065413225,"results":"66","hashOfConfig":"45"},{"size":14405,"mtime":1616402548497,"results":"67","hashOfConfig":"45"},{"size":7606,"mtime":1616402548495,"results":"68","hashOfConfig":"45"},{"size":9127,"mtime":1619510380144,"results":"69","hashOfConfig":"45"},{"size":1065,"mtime":1616402548503,"results":"70","hashOfConfig":"45"},{"size":2007,"mtime":1616402548506,"results":"71","hashOfConfig":"45"},{"size":1810,"mtime":1616402548504,"results":"72","hashOfConfig":"45"},{"size":95,"mtime":1616402548506,"results":"73","hashOfConfig":"45"},{"size":2759,"mtime":1616402548506,"results":"74","hashOfConfig":"45"},{"size":1754,"mtime":1616402548505,"results":"75","hashOfConfig":"45"},{"size":4912,"mtime":1616402548498,"results":"76","hashOfConfig":"45"},{"size":1523,"mtime":1616402548506,"results":"77","hashOfConfig":"45"},{"size":7311,"mtime":1616402548495,"results":"78","hashOfConfig":"45"},{"size":813,"mtime":1616402548505,"results":"79","hashOfConfig":"45"},{"size":6999,"mtime":1616402548494,"results":"80","hashOfConfig":"45"},{"size":239,"mtime":1616402548505,"results":"81","hashOfConfig":"45"},{"size":1114,"mtime":1616402548497,"results":"82","hashOfConfig":"45"},{"size":4072,"mtime":1616402548503,"results":"83","hashOfConfig":"45"},{"size":8480,"mtime":1616402548500,"results":"84","hashOfConfig":"45"},{"size":7224,"mtime":1616402548499,"results":"85","hashOfConfig":"45"},{"size":3967,"mtime":1616402548501,"results":"86","hashOfConfig":"45"},{"size":2286,"mtime":1619662646605,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"16ho323",{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"90"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"90"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"90"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tianxingyu/ecn3/ECN-Viewer/src/index.js",[],["189","190"],"/Users/tianxingyu/ecn3/ECN-Viewer/src/serviceWorker.js",["191"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* globals fetch */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/App.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/FeedbackContext.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Theme/ThemeProvider.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Layout/index.js",["192","193"],"import React from 'react'\nimport { HashRouter, Route, Switch, NavLink, Redirect, useLocation } from 'react-router-dom'\nimport Avatar from '@material-ui/core/Avatar'\nimport HomeIcon from '@material-ui/icons/HomeOutlined'\nimport CatalogIcon from '@material-ui/icons/GraphicEqOutlined'\nimport SettingsIcon from '@material-ui/icons/SettingsOutlined'\n\nimport ECNViewer from '../ECNViewer'\nimport Catalog from '../Catalog'\nimport Modal from '../Utils/Modal'\nimport Config from '../Config'\n// import ECNViewerConfig from '../ECNViewerConfig'\n// import SimpleTabs from '../Utils/Tabs'\nimport { ControllerContext } from '../ControllerProvider'\n\nimport logomark from '../assets/logomark.svg'\nimport './layout.scss'\n\nimport { makeStyles } from '@material-ui/styles'\nimport { MapProvider } from '../providers/Map'\nimport { useData } from '../providers/Data'\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    color: theme.colors.neutral,\n    backgroundColor: 'white'\n  },\n  divider: {\n    margin: '15px 0'\n  },\n  logo: {\n    backgroundColor: theme.colors.purple,\n    color: theme.colors.white\n  },\n  latNav: {\n    backgroundColor: theme.colors.carbon\n  },\n  latIcons: {\n    margin: 'auto',\n    marginTop: '15px',\n    cursor: 'pointer',\n    backgroundColor: theme.colors.carbon,\n    '.active &': {\n      backgroundColor: '#0E445C'\n    }\n  },\n  topIcons: {\n    height: '100%',\n    width: '25px',\n    marginRight: '25px',\n    cursor: 'pointer'\n  },\n  nav: {\n    marginBottom: '15px',\n    height: '50px',\n    '& a': {\n      height: '100%',\n      '& img': {\n        height: '100%'\n      }\n    }\n  },\n  footerContainer: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    justifyItems: 'center',\n    padding: '20px 10px 20px 0px'\n  },\n  footer: {\n    color: theme.colors.neutral,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    fontSize: '9pt',\n    '& a': {\n      color: theme.colors.neutral,\n      textDecoration: 'none!important'\n    }\n  }\n}))\n\nfunction RouteWatcher ({ children }) {\n  const { refreshData } = useData()\n  const location = useLocation()\n\n  React.useEffect(() => {\n    if (location.pathname === '/overview') {\n      console.log('Refreshing data')\n      refreshData()\n    }\n  }, [location])\n\n  return null\n}\n\nexport default function Layout () {\n  const classes = useStyles()\n  const returnHomeCbRef = React.useRef(null)\n  const { user, status } = React.useContext(ControllerContext)\n  const [settingsOpen, setSettingsOpen] = React.useState(!(user.email && user.password))\n\n  console.log(' ====> Rendering layout')\n\n  const returnHome = () => {\n    if (returnHomeCbRef.current) {\n      returnHomeCbRef.current()\n    }\n  }\n\n  return (\n    <>\n      <HashRouter>\n        <RouteWatcher />\n        <div className={classes.wrapper + ' wrapper'}>\n          <div className={classes.logo + ' logo'}>\n            <NavLink to='/overview' onClick={() => returnHome()}>\n              <img src={logomark} alt='Edgeworx logomark' />\n            </NavLink>\n          </div>\n          <div className={classes.latNav + ' latnav'}>\n            <NavLink to='/overview' onClick={() => returnHome()}>\n              <Avatar className={classes.latIcons}>\n                <HomeIcon />\n              </Avatar>\n            </NavLink>\n            <NavLink to='/catalog'>\n              <Avatar className={classes.latIcons}>\n                <CatalogIcon />\n              </Avatar>\n            </NavLink>\n            <Avatar className={classes.latIcons}>\n              <SettingsIcon onClick={() => setSettingsOpen(v => !v)} />\n            </Avatar>\n          </div>\n          <div className='content'>\n            <Switch>\n              <Route path='/catalog' component={Catalog} />\n              <Route path='/overview' component={() => <MapProvider><ECNViewer returnHomeCBRef={returnHomeCbRef} /></MapProvider>} />\n              <Route component={() => <Redirect to='/overview' />} />\n            </Switch>\n          </div>\n          <div className={`${classes.footerContainer} footer`}>\n            <span className={classes.footer}>\n              {/* <span>Controller v{status.versions.controller} - ECN Viewer v{status.versions.ecnViewer}</span> */}\n              <a style={{ margin: 'auto' }} href='http://www.eclipse.org/legal/copyright.php'>© 2021 Eclipse Foundation, Inc.</a>\n            </span>\n          </div>\n        </div>\n      </HashRouter>\n      <Modal\n        {...{\n          open: settingsOpen,\n          title: 'Configuration',\n          onClose: () => setSettingsOpen(false),\n          style: {\n            modalContent: {\n              paddingTop: 0\n            }\n          }\n        }}\n      >\n        {/* <SimpleTabs> */}\n        <Config title='User credentials' {...{ onSave: () => setSettingsOpen(false) }} />\n        {/* <ECNViewerConfig title='ECN Viewer' {...{ onSave: () => setSettingsOpen(false) }} /> */}\n        {/* </SimpleTabs> */}\n      </Modal>\n    </>\n  )\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/ControllerProvider/index.js",["194"],"import React from 'react'\n\nconst controllerJson = window.controllerConfig\n\nconst initControllerState = (() => {\n  const localUser = window.localStorage.getItem('iofogUser')\n  if ((!controllerJson.user || !controllerJson.user.email) && localUser) {\n    controllerJson.user = JSON.parse(localUser)\n  }\n  return {\n    ...controllerJson,\n    api: `${window.location.protocol}//${controllerJson.ip}:${controllerJson.port || 80}/`,\n    location: {\n      lat: 'Unknown',\n      lon: 'Unknown',\n      query: controllerJson.ip\n    },\n    status: {\n      versions: {\n        controller: '',\n        ecnViewer: ''\n      }\n    }\n  }\n})()\n\nconst IPLookUp = 'http://ip-api.com/json/'\n\n// If dev mode, use proxy\n// Otherwise assume you are running on the Controller\nconst getUrl = (path) => controllerJson.dev ? `/api/controllerApi${path}` : `${window.location.protocol}//${[window.location.hostname, controllerJson.port].join(':')}${path}`\nconst getHeaders = (headers) => controllerJson.dev\n  ? ({\n    ...headers,\n    'ECN-Api-Destination': controllerJson.dev ? `http://${controllerJson.ip}:${controllerJson.port}/` : ''\n  }) : headers\n\nexport const ControllerContext = React.createContext({\n  controller: {\n    status: {}\n  },\n  updateController: () => {}\n})\n\nexport const useController = () => React.useContext(ControllerContext)\n\nconst lookUpControllerInfo = async (ip) => {\n  if (!ip) {\n    ip = window.location.host.split(':')[0] // Get only ip, not port\n  }\n  const localhost = new RegExp('(0\\.0\\.0\\.0|localhost|127\\.0\\.0\\.1|192\\.168\\.)') // eslint-disable-line no-useless-escape\n  const lookupIP = localhost.test(ip) ? '8.8.8.8' : ip\n  const response = await window.fetch(IPLookUp + lookupIP)\n  if (response.ok) {\n    return response.json()\n  } else {\n    throw new Error(response.statusText)\n  }\n}\n\nconst getControllerStatus = async (api) => {\n  const response = await await window.fetch(getUrl('/api/v3/status'), {\n    headers: getHeaders({})\n  })\n  if (response.ok) {\n    return response.json()\n  } else {\n    console.log('Controller status unreachable', { status: response.statusText })\n  }\n}\n\nexport default function Context (props) {\n  // const [token, setToken] = React.useState(null)\n  const tokenRef = React.useRef(null)\n  const [controllerUser, setControllerUser] = React.useState(initControllerState.user)\n  const [controllerLocation, setControllerLocation] = React.useState(initControllerState.location)\n  const [controllerStatus, setControllerStatus] = React.useState(initControllerState.status)\n  const [error, setError] = React.useState(null)\n  const [refresh, setRefresh] = React.useState(window.localStorage.getItem('iofogRefresh') || 3000)\n\n  const setToken = (newToken) => {\n    tokenRef.current = newToken\n  }\n  React.useEffect(() => {\n    // Grab controller location informations\n    const effect = async () => {\n      let ipInfo = {}\n      try {\n        ipInfo = await lookUpControllerInfo(controllerJson.ip)\n      } catch (e) {\n        ipInfo = {\n          lat: 'Unknown',\n          lon: 'Unknown',\n          query: controllerJson.ip\n        }\n      }\n      setControllerLocation(ipInfo)\n    }\n    effect()\n  }, [])\n\n  React.useEffect(() => {\n    const effect = async () => {\n      // Everytime user is updated, try to grab status\n      const status = await getControllerStatus()\n      setControllerStatus(status)\n    }\n    effect()\n  }, [controllerUser])\n\n  const authenticate = async (user) => {\n    const response = await window.fetch(getUrl('/api/v3/user/login'), {\n      method: 'POST',\n      headers: getHeaders({\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify(user || controllerUser)\n    })\n    if (response.ok) {\n      const token = (await response.json()).accessToken\n      setToken(token)\n      setError(null)\n      return token\n    } else {\n      setToken(null)\n      throw new Error(response.statusText)\n    }\n  }\n\n  // Wrapper around window.fetch to add proxy and authorization headers\n  const request = React.useMemo(() => async (path, options = {}) => {\n    try {\n      let t = tokenRef.current\n      if (!t) {\n        t = await authenticate()\n      }\n      if (options.body && typeof options.body === typeof {}) {\n        options.body = JSON.stringify(options.body)\n        options.headers = {\n          ...options.headers,\n          'Content-Type': 'application/json'\n        }\n      }\n      const response = await window.fetch(getUrl(path), {\n        ...options,\n        headers: getHeaders({\n          ...options.headers,\n          Authorization: t\n        })\n      })\n      if (error) {\n        setError(null)\n      }\n      return response\n    } catch (err) {\n      setError(err)\n      return ({\n        ok: false,\n        statusText: err.message || 'Could not reach controller'\n      })\n    }\n  }, [tokenRef.current, error])\n\n  const updateController = async ({ user, refresh }) => {\n    window.localStorage.setItem('iofogUser', JSON.stringify(user))\n    window.localStorage.setItem('iofogRefresh', refresh)\n    setControllerUser(user)\n    setRefresh(refresh)\n    try {\n      await authenticate(user)\n    } catch (e) {\n      setError(e)\n      throw e\n    }\n  }\n\n  return (\n    <ControllerContext.Provider value={{\n      refresh,\n      location: controllerLocation,\n      status: controllerStatus,\n      user: controllerUser,\n      error,\n      updateController,\n      request\n    }}\n    >\n      {props.children}\n    </ControllerContext.Provider>\n  )\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/providers/Data/index.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/providers/Config/index.js",["195"],"import { get as lget, set as lset } from 'lodash'\nimport React from 'react'\nimport { useController } from '../../ControllerProvider'\nimport { theme } from '../../Theme/ThemeProvider'\n\nexport const ConfigContext = React.createContext()\nexport const useConfig = () => React.useContext(ConfigContext)\n\nconst _initConfig = {\n  tags: {},\n  controllerLocationInfo: {\n    lat: 'Unknown',\n    lon: 'Unknown',\n    query: ''\n  }\n}\n\nconst defaultTagColor = theme.colors.cobalt\n\nconst ecnViewerConfigKey = 'ecn-viewer-config'\n\nexport const ConfigProvider = ({\n  children\n}) => {\n  const { request, location } = useController()\n  const [config, setConfig] = React.useState({ ..._initConfig, controllerLocation: location })\n\n  const _fetchConfig = async () => {\n    try {\n      const res = await request(`/api/v3/config/${ecnViewerConfigKey}`)\n      if (res.ok) {\n        const { value: stringifiedConfig } = await res.json()\n        setConfig(JSON.parse(stringifiedConfig))\n      }\n    } catch (e) {\n\n    }\n  }\n\n  const saveConfig = async (newConfig) => {\n    const res = await request('/api/v3/config', {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        key: ecnViewerConfigKey,\n        value: JSON.stringify(newConfig)\n      })\n    })\n    if (res.ok) {\n      setConfig(newConfig)\n    }\n    return res\n  }\n\n  const getTagDisplayInfo = value => {\n    return { ...lget(config, `tags['${value}']`, { color: defaultTagColor }), value }\n  }\n\n  const updateTags = (agents = []) => {\n    let updated = false\n    for (const agent of agents) {\n      if (agent.tags) {\n        for (const tag of agent.tags) {\n          if (!lget(config, `tags['${tag}']`)) {\n            updated = true\n            lset(config, `tags['${tag}']`, { icon: '', color: defaultTagColor })\n          }\n        }\n      }\n    }\n    if (updated) {\n      setConfig(config)\n    }\n  }\n\n  React.useEffect(() => {\n    _fetchConfig()\n  }, [])\n\n  const isDebug = window.location.search.includes('debug=true')\n  return (\n    <ConfigContext.Provider\n      value={{\n        isDebug,\n        editConfig: setConfig,\n        updateTags,\n        getTagDisplayInfo,\n        saveConfig,\n        config\n      }}\n    >\n      {children}\n    </ConfigContext.Provider>\n  )\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/Alert.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/Modal.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/providers/Data/agent-manager.js",["196"],"const deleteAgent = (request) => async (agent) => {\n  return request('/api/v3/iofog/' + agent.uuid, { method: 'DELETE' })\n}\n\nconst listAgents = (request) => async () => {\n  const agentsResponse = await request('/api/v3/iofog-list')\n  if (!agentsResponse.ok) {\n    throw new Error({ message: agentsResponse.statusText })\n  }\n  return (await agentsResponse.json()).fogs\n}\n\nexport default {\n  deleteAgent,\n  listAgents\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/providers/Data/application-manager.js",["197"],"const deleteApplication = (request) => async (app) => {\n  return request('/api/v3/application/' + app.name, { method: 'DELETE' })\n}\n\nconst listApplications = (request) => async () => {\n  const agentsResponse = await request('/api/v3/application')\n  if (!agentsResponse.ok) {\n    throw new Error({ message: agentsResponse.statusText })\n  }\n  return (await agentsResponse.json()).applications\n}\n\nconst toggleApplication = (request) => async (app) => {\n  const agentsResponse = await request(`/api/v3/application/${app.name}`, {\n    method: 'PATCH',\n    body: {\n      isActivated: !app.isActivated\n    }\n  })\n  if (!agentsResponse.ok) {\n    throw new Error({ message: agentsResponse.statusText })\n  }\n  return agentsResponse\n}\n\nexport default {\n  deleteApplication,\n  listApplications,\n  toggleApplication\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/hooks/useInterval.js",["198"],"import React from 'react'\n\nfunction useRecursiveTimeout (\n  callback,\n  delay\n) {\n  const savedCallback = React.useRef(callback)\n\n  // Remember the latest callback.\n  React.useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the timeout loop.\n  React.useEffect(() => {\n    let id\n    function tick () {\n      const ret = savedCallback.current()\n\n      if (ret instanceof Promise) {\n        ret.then(() => {\n          if (delay !== null) {\n            id = setTimeout(tick, delay)\n          }\n        })\n      } else {\n        if (delay !== null) {\n          id = setTimeout(tick, delay)\n        }\n      }\n    }\n    if (delay !== null) {\n      (savedCallback.current || callback)()\n      id = setTimeout(tick, delay)\n      return () => id && clearTimeout(id)\n    }\n  }, [delay])\n}\n\nexport default useRecursiveTimeout\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/Catalog/index.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/index.js",["199","200"],"import React from 'react'\nimport { isFinite, uniqBy } from 'lodash'\n\nimport Map from './Map'\nimport Default from './Default'\nimport AgentDetails from './AgentDetails'\nimport ApplicationDetails from './ApplicationDetails'\nimport MicroserviceDetails from './MicroserviceDetails'\nimport Navigation from './Navigation'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\n\n// import logo from '../assets/logo.png'\nimport './layout.scss'\n\nimport { useMap } from '../providers/Map'\nimport { useData } from '../providers/Data'\nimport { useConfig } from '../providers/Config'\nimport { ControllerContext } from '../ControllerProvider'\n\nconst views = {\n  DEFAULT: 1,\n  AGENT_DETAILS: 2,\n  APPLICATION_DETAILS: 3,\n  MICROSERVICE_DETAILS: 4\n}\n\nexport default function ECNViewer ({ returnHomeCBRef }) {\n  const { data, loading } = useData()\n  const { config } = useConfig()\n  const { location: _location } = React.useContext(ControllerContext)\n  const { setMap, map, restoreMapToState } = useMap()\n  const [selectedElement, selectElement] = React.useState(null)\n  const [history, setHistory] = React.useState([])\n  const [view, setView] = React.useState(views.DEFAULT)\n  const showMap = useMediaQuery('(min-width:992px)') // Bootstrap4 lg\n\n  const location = config.controllerLocationInfo || _location\n  location.lat = +location.lat\n  location.lon = +location.lon\n\n  const saveHistory = () => {\n    setHistory(h => [...h, { view, selectedElement, map }])\n  }\n\n  const selectAgent = (a) => {\n    const copy = { ...a }\n    saveHistory()\n    selectElement(copy)\n    if (isFinite(a.latitude) && isFinite(a.longitude)) {\n      setMap([copy], { location }, false)\n    }\n    setView(views.AGENT_DETAILS)\n  }\n\n  const selectApplication = (a) => {\n    const copy = { ...a }\n    saveHistory()\n    selectElement(copy)\n    setMap(uniqBy(a.microservices.map(m => data.reducedAgents.byUUID[m.iofogUuid]), a => a.uuid), null, false)\n    setView(views.APPLICATION_DETAILS)\n  }\n\n  const selectMicroservice = (a) => {\n    const copy = { ...a }\n    saveHistory()\n    selectElement(copy)\n    setMap([data.reducedAgents.byUUID[a.iofogUuid]], null, false)\n    setView(views.MICROSERVICE_DETAILS)\n  }\n\n  const seeAllECN = () => {\n    selectElement({})\n    setView(views.DEFAULT)\n    selectController()\n    setHistory([])\n  }\n\n  React.useEffect(() => {\n    returnHomeCBRef.current = seeAllECN\n    return () => { returnHomeCBRef.current = null }\n  }, [seeAllECN])\n\n  const back = () => {\n    if (history.length) {\n      const previousState = history[history.length - 1]\n      setView(previousState.view)\n      selectElement(previousState.selectedElement)\n      restoreMapToState(previousState.map)\n      setHistory(h => {\n        h.pop()\n        return h\n      })\n    } else {\n      seeAllECN()\n    }\n  }\n\n  React.useEffect(() => {\n    if (!loading) {\n      setMap(data.activeAgents, { location }, true)\n    }\n  }, [loading])\n\n  const selectController = () => {\n    setMap(data.activeAgents, { location }, true)\n  }\n\n  const setAutozoom = () => {\n    setMap(data.controller.agents, { location }, true)\n  }\n\n  const _getView = (view) => {\n    switch (view) {\n      case views.AGENT_DETAILS:\n        return (\n          <AgentDetails\n            {\n              ...{\n                agent: selectedElement,\n                selectApplication,\n                selectMicroservice,\n                back\n              }\n            }\n          />\n        )\n      case views.APPLICATION_DETAILS:\n        return (\n          <ApplicationDetails\n            {\n              ...{\n                application: selectedElement,\n                selectMicroservice,\n                selectAgent,\n                back\n              }\n            }\n          />\n        )\n      case views.MICROSERVICE_DETAILS:\n        return (\n          <MicroserviceDetails\n            {\n              ...{\n                microservice: selectedElement,\n                selectApplication,\n                selectAgent,\n                back\n              }\n            }\n          />\n        )\n      case views.DEFAULT:\n      default:\n        return (\n          <Default {\n            ...{\n              setAutozoom,\n              selectController,\n              selectAgent,\n              selectApplication,\n              selectedElement,\n              setView,\n              views\n            }\n          }\n          />)\n    }\n  }\n\n  const { controller, msvcsPerAgent } = data\n  // console.log({ location, controller, config })\n  return (\n    <div className='viewer-layout-container'>\n      <div className='box sidebar'>\n        <Navigation {...{ view, selectedElement, views, back }} />\n        {_getView(view)}\n      </div>\n      {showMap && (\n        <div className='map-grid-container'>\n          <Map {...{ controller: { ...controller, info: { location } }, agent: selectedElement, setAgent: selectAgent, msvcsPerAgent, loading }} />\n          <div className='map-overlay' />\n        </div>\n      )}\n    </div>\n  )\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/Config/index.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/providers/Map/index.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Navigation.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Map.js",["201","202","203","204","205","206","207","208","209","210","211"],"import React, { useEffect, useState } from 'react'\n\nimport GoogleMapReact from 'google-map-react'\nimport { Avatar } from '@material-ui/core'\nimport CtrlIcon from '@material-ui/icons/DeveloperBoard'\nimport Icon from '@material-ui/core/Icon'\nimport { makeStyles, useTheme } from '@material-ui/styles'\nimport L from 'leaflet'\nimport { statusColor, tagColor } from './utils'\nimport { useMap } from '../providers/Map'\nimport { MapContainer } from './myleaflet'\n\nsessionStorage.setItem(\"iscontrolready\", \"true\");\n\nexport const { Provider, Consumer } = React.createContext(\"a\");\n\n\nconst useStyles = makeStyles(theme => ({\n  mapMarkerTransform: {\n    transform: 'translate(-50%, -100%)',\n    position: 'absolute'\n  },\n  msvcBadge: {\n    '& .MuiBadge-badge': {\n      backgroundColor: `var(--color, ${theme.colors.cobalt})`\n    }\n  },\n  mapMarker: {\n    backgroundColor: `var(--markerColor, ${theme.colors.success})`,\n    borderRadius: '50% 50% 50% 0 !important',\n    border: `2px solid var(--markerColor, ${theme.colors.success})`,\n    transform: 'rotate(-45deg)',\n    '& .MuiSvgIcon-root': {\n      transform: 'rotate(-45deg)'\n    },\n    width: '50px',\n    height: '50px',\n    fontSize: 24\n  },\n  mapWrapper: {\n    width: '172%',\n    height: '100%',\n    position: 'fixed',\n    top: 0,\n    '@media (min-width: 1200px)': {\n      width: '156%'//if the max width  > 96%  the leaflet controller will be hide\n    }\n  },\n  selectedMarker: {\n    zIndex: 2,\n    fontSize: 32,\n    width: '80px',\n    height: '80px'\n  },\n  selectedMarkerTransform: {\n    zIndex: 2,\n    '& $erContainer': {\n      width: '30px',\n      height: '30px',\n      '& .MuiIcon-root': {\n        fontSize: 16\n      }\n    }\n  },\n  erContainer: {\n    backgroundColor: tagColor,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: '2px',\n    padding: '4px',\n    borderRadius: '100%',\n    zIndex: 3,\n    width: '20px',\n    height: '20px',\n    '& .MuiIcon-root': {\n      fontSize: 14\n    },\n    color: 'white'\n  }\n}))\n\n\nexport default function Map (props) {\n  const classes = useStyles()\n  const theme = useTheme()\n  const { controller, setAgent, loading, agent: selectedAgent } = props\n  const { map, mapRef, hasValidCoordinates } = useMap()\n  const [mcstate, setMcstate] = useState(false);\n  const [mymap, setMymap] = useState(0);\n  var propsdata = (controller.agents).filter(a => hasValidCoordinates([a.latitude, a.longitude])).map(a =>\n    [a.latitude, a.longitude]\n  )\n  function getMapContainer(a) {\n    setMymap(a)\n  \n  }\n  function changemcstate(a) {\n    setMcstate(a)\n  }\n\n  function ViewerMarker(props) {\n    //componentDidmount is not over so this component return null\n    if (mcstate == false) {\n      return null\n    } else {\n      return (\n        // componentDidmount is over Mymarker function can be mark on the map\n        <Consumer>\n          {(mymapobj) => {\n            const Mymarker = L.marker(props.position).addTo(mymapobj);\n            // var allcity = L.layerGroup(...Mymarker).addTo(mymapobj);\n          }\n          }\n        </Consumer>\n      );\n    }\n  }\n  function SetViewOnClick({ coords }) {\n    if (mcstate == false) {\n      return null\n    } else {\n      return (\n        //  \n        <Consumer>\n          {(mymapobj) => {\n            const map = mymapobj\n            map.setView(coords.center, coords.zoom);\n          }\n          }\n        </Consumer>\n      );\n    }\n  }\n\n\n  return (\n    <div className={[classes.mapWrapper, 'mui-fixed'].join(' ')} ref={mapRef}>\n       <MapContainer\n        {...map}\n        position={propsdata}\n        getfun={getMapContainer}//get leaflet example\n        mcstate={changemcstate}//change react state\n        isloading={loading}\n      >\n        <Provider value={mymap}>\n          <SetViewOnClick coords={map} />\n          {(loading ? [] : controller.agents).filter(a => hasValidCoordinates([a.latitude, a.longitude])).map(a =>\n            <ViewerMarker\n              mInstance={MapContainer}\n              key={a.uuid}\n              position={[a.latitude, a.longitude]}\n              eventHandlers={{\n                click: () => {\n                  setAgent(a)\n                }\n              }}\n              mType='agent'\n              mInfo={a}\n            >\n            </ViewerMarker>\n          )}\n        </Provider>\n          </MapContainer>\n\n    </div>\n  )\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/MicroserviceDetails/index.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/ApplicationDetails/index.js",["212","213"],"import React from 'react'\n\nimport ReactJson from '../../Utils/ReactJson'\nimport { Paper, Typography, makeStyles, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Button, Table, TableBody, TableHead, TableRow, TableCell, useMediaQuery } from '@material-ui/core'\n\nimport { useData } from '../../providers/Data'\n\nimport getSharedStyle from '../sharedStyles'\nimport { dateFormat, icons } from '../utils'\n\nimport moment from 'moment'\nimport MicroservicesTable from '../MicroservicesTable'\nimport yaml from 'js-yaml' \n\nimport AceEditor from 'react-ace'\nimport 'ace-builds/src-noconflict/theme-monokai'\nimport 'ace-builds/src-noconflict/mode-yaml'\n\nimport { useFeedback } from '../../Utils/FeedbackContext'\nimport { MsvcStatus as Status } from '../../Utils/Status'\nimport Modal from '../../Utils/Modal'\nimport SearchBar from '../../Utils/SearchBar'\n\nconst useStyles = makeStyles(theme => ({\n  ...getSharedStyle(theme)\n}))\n\nconst notFoundMsvc = { name: 'UNKNOWN', status: {}, notFound: true }\n\nexport default function ApplicationDetails ({ application: selectedApplication, selectApplication, selectMicroservice, selectAgent, back }) {\n  const { data, toggleApplication: _toggleApplication, deleteApplication: _deleteApplication } = useData()\n  const classes = useStyles()\n  const { pushFeedback } = useFeedback()\n  const [openDeleteApplicationDialog, setOpenDeleteApplicationDialog] = React.useState(false)\n  const [openDetailsModal, setOpenDetailsModal] = React.useState(false)\n  const [msvcFilter, setMsvcFilter] = React.useState('')\n  const isMediumScreen = useMediaQuery('(min-width: 768px)')\n\n  const { applications, reducedAgents } = data\n  const application = (applications || []).find(a => selectedApplication.name === a.name) || selectedApplication // Get live updates from data\n  const runningMsvcs = application.microservices.filter(m => m.status.status === 'RUNNING')\n\n  const toggleApplication = async (app) => {\n    try {\n      const response = await _toggleApplication(app)\n      if (response.ok) {\n        app.isActivated = !app.isActivated\n        pushFeedback({ type: 'success', message: `Application ${app.isActivated ? 'Started' : 'Stopped'}!` })\n      } else {\n        pushFeedback({ type: 'error', message: response.status })\n      }\n    } catch (e) {\n      pushFeedback({ type: 'error', message: e.message || e.status })\n    }\n  }\n\n  const restartApplication = async (app) => {\n    await toggleApplication(app)\n    await toggleApplication(app)\n  }\n\n  const deleteApplication = async (app) => {\n    try {\n      const response = await _deleteApplication(app)\n      if (response.ok) {\n        pushFeedback({ type: 'success', message: 'Application Deleted!' })\n        setOpenDeleteApplicationDialog(false)\n        back()\n      } else {\n        pushFeedback({ type: 'error', message: response.status })\n      }\n    } catch (e) {\n      pushFeedback({ type: 'error', message: e.message || e.status })\n    }\n  }\n\n  const _getApplicationYAMLFromJSON = (app) => {\n    return {\n      apiVersion: 'iofog.org/v2',\n      kind: 'Application',\n      metadata: {\n        name: app.name\n      },\n      spec: {\n        microservices: app.microservices.map(m => ({\n          name: m.name,\n          agent: {\n            name: (reducedAgents.byUUID[m.iofogUuid] || { name: '__UNKNOWN__' }).name\n          },\n          images: m.images.reduce((acc, image) => {\n            switch (image.fogTypeId) {\n              case 1:\n                acc.x86 = image.containerImage\n                break\n              case 2:\n                acc.arm = image.containerImage\n                break\n            }\n            return acc\n          }, {\n            registry: m.registryId\n          }),\n          container: {\n            ports: m.ports.map(p => {\n              if (p.host) {\n                p.host = (reducedAgents.byUUID[p.host] || { name: p.host }).name\n              }\n              return p\n            }),\n            volumes: m.volumeMappings.map(vm => {\n              delete vm.id\n              return vm\n            }),\n            env: m.env.map(env => {\n              delete env.id\n              return env\n            }),\n            extraHosts: m.extraHosts.map(eH => {\n              delete eH.id\n              return eH\n            }),\n            commands: m.cmd.map(cmd => {\n              delete cmd.id\n              return cmd\n            })\n          },\n          config: JSON.parse(m.config)\n        })),\n        routes: app.routes.map(r => ({\n          name: r.name,\n          from: r.from,\n          to: r.to\n        }))\n      }\n    }\n  }\n\n  const yamlDump = React.useMemo(() => yaml.dump(_getApplicationYAMLFromJSON(application)), [application])\n\n  const status = application.isActivated ? 'STARTED' : 'STOPPED'\n  const routes = application.routes || []\n  if (!routes.length) { routes.push({}) }\n\n  const mainActions = (\n    <div className={classes.actions} style={{ minWidth: '100px' }}>\n      <icons.DeleteIcon onClick={() => setOpenDeleteApplicationDialog(true)} className={classes.action} title='Delete application' />\n      {application.isActivated\n        ? <icons.RestartIcon className={classes.action} onClick={() => restartApplication(application)} title='Restart application' />\n        : <icons.RestartIcon className={classes.disabledAction} title='Restart application' />}\n      {application.isActivated\n        ? <icons.StopIcon className={classes.action} onClick={() => toggleApplication(application)} title='Stop application' />\n        : <icons.PlayIcon className={classes.action} onClick={() => toggleApplication(application)} title='Start application' />}\n    </div>\n  )\n\n  const detailActions = (\n    <div className={classes.actions} style={{ minWidth: 0 }}>\n      <icons.CodeIcon onClick={() => setOpenDetailsModal(true)} className={classes.action} title='Details' />\n    </div>\n  )\n\n  return (\n    <>\n      <Paper className={`section first ${classes.multiSections}`}>\n        <div className={[classes.section, 'paper-container-left', classes.bottomPad].join(' ')}>\n          <Typography variant='subtitle2' className={classes.title}>\n            <span>Status</span>\n            {!isMediumScreen && mainActions}\n          </Typography>\n          <span className={classes.text} style={{ display: 'flex', alignItems: 'center' }}><Status status={status} style={{ marginRight: '5px', marginTop: '-3px' }} />{status}</span>\n        </div>\n        <div className={classes.sectionDivider} />\n        <div className={[classes.section, 'paper-container-right'].join(' ')} style={{ paddingBottom: '15px' }}>\n          <Typography variant='subtitle2' className={classes.title}>\n            <span>Description</span>\n            {isMediumScreen && mainActions}\n          </Typography>\n          <span className={classes.text}>{application.description}</span>\n        </div>\n      </Paper>\n      <Paper className={`section ${classes.multiSections}`}>\n        <div className={[classes.section, 'paper-container-left'].join(' ')}>\n          <Typography variant='subtitle2' className={classes.title} style={{ minWidth: '100%' }}>\n            <span>Application Details</span>\n            {!isMediumScreen && detailActions}\n          </Typography>\n          <div className={classes.subSection}>\n            <span className={classes.subTitle}>Last Active</span>\n            <span className={classes.text}>{moment(application.lastStatusTime).format(dateFormat)}</span>\n          </div>\n          <div className={classes.subSection}>\n            <span className={classes.subTitle}>Microservices</span>\n            <span className={classes.text}>{runningMsvcs.length}/{application.microservices.length}</span>\n          </div>\n          <div className={classes.subSection}>\n            <span className={classes.subTitle}>Created at</span>\n            <span className={classes.text}>{moment(application.createdAt).format(dateFormat)}</span>\n          </div>\n        </div>\n        {isMediumScreen && (\n          <div className={[classes.section, 'paper-container-right'].join(' ')}>\n            <Typography variant='subtitle2' className={classes.title} style={{ justifyContent: 'flex-end' }}>\n              {detailActions}\n            </Typography>\n            {/* {application.routes.map((r, idx) =>\n            <div key={r.name || idx} className={classes.subSection}>\n              <span className={classes.subTitle}>{r.name}</span>\n              <span className={classes.text}>{r.from}&nbsp;&#8594;&nbsp;{r.to}</span>\n            </div>\n          )} */}\n          </div>\n        )}\n      </Paper>\n      <Paper className='section'>\n        <div className='section-container'>\n          <div className={[classes.section, classes.cardTitle, 'paper-container-left', 'paper-container-right'].join(' ')}>\n            <Typography variant='subtitle2' className={classes.title}>\n              <span className={[classes.stickyLeft, classes.textEllipsis].join(' ')}>Microservices</span>\n              <SearchBar onSearch={setMsvcFilter} inputClasses={{ root: classes.narrowSearchBar }} classes={{ root: classes.stickyRight }} />\n            </Typography>\n          </div>\n          <MicroservicesTable\n            selectAgent={selectAgent}\n            application={application}\n            selectMicroservice={selectMicroservice}\n            filter={msvcFilter}\n          />\n        </div>\n      </Paper>\n      <Paper className='section'>\n        <div className='section-container'>\n          <div className={[classes.section, 'paper-container-left', 'paper-container-right'].join(' ')}>\n            <Typography variant='subtitle2' className={classes.title}>\n              <span className={classes.stickyLeft}>Routes</span>\n            </Typography>\n          </div>\n          <Table stickyHeader>\n            <TableHead>\n              <TableRow>\n                <TableCell className={classes.tableTitle} classes={{ stickyHeader: classes.stickyHeaderCell }} style={{ top: '44px' }}>Name</TableCell>\n                <TableCell className={classes.tableTitle} classes={{ stickyHeader: classes.stickyHeaderCell }} style={{ top: '44px' }}>From</TableCell>\n                <TableCell className={classes.tableTitle} classes={{ stickyHeader: classes.stickyHeaderCell }} style={{ top: '44px' }}>To</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {routes\n                .map((p, idx) => {\n                  if (!p.name) {\n                    return <TableRow key={idx}><TableCell colSpan={3} /></TableRow>\n                  }\n                  const from = application.microservices.find(m => m.name === p.from) || notFoundMsvc\n                  const to = application.microservices.find(m => m.name === p.to) || notFoundMsvc\n                  return (\n                    <TableRow key={p.name}>\n                      <TableCell component='th' scope='row'>\n                        {p.name}\n                      </TableCell>\n                      <TableCell>\n                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-start' }}>\n                          <Status status={from.status.status} size={10} style={{ marginRight: '5px', '--pulse-size': '5px' }} />\n                          <span className={from.notFound ? '' : classes.action} onClick={() => from.notFound ? null : selectMicroservice(from)}>{from.name}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-start' }}>\n                          <Status status={to.status.status} size={10} style={{ marginRight: '5px', '--pulse-size': '5px' }} />\n                          <span className={to.notFound ? '' : classes.action} onClick={() => to.notFound ? null : selectMicroservice(to)}>{to.name}</span>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )\n                })}\n            </TableBody>\n          </Table>\n        </div>\n      </Paper>\n      <Paper className='section' style={{ maxHeight: '800px', paddingBottom: '15px' }}>\n        <div className={[classes.section, 'paper-container-left', 'paper-container-right'].join(' ')}>\n          <Typography variant='subtitle2' className={classes.title} style={{ zIndex: 5 }}>Application YAML</Typography>\n          <AceEditor\n            mode='yaml'\n            theme='monokai'\n            defaultValue={yamlDump}\n            readOnly\n            onLoad={function (editor) { editor.renderer.setPadding(10); editor.renderer.setScrollMargin(10) }}\n            style={{\n              width: '100%',\n              height: '700px',\n              borderRadius: '4px'\n            }}\n          />\n        </div>\n      </Paper>\n      <Dialog\n        open={openDeleteApplicationDialog}\n        onClose={() => { setOpenDeleteApplicationDialog(false) }}\n      >\n        <DialogTitle id='alert-dialog-title'>Delete {application.name}?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            <span>Deleting an Application will delete all its microservices.</span><br />\n            <span>This is not reversible.</span>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenDeleteApplicationDialog(false)}>\n            Cancel\n          </Button>\n          <Button onClick={() => { deleteApplication(application) }} color='secondary' autoFocus>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Modal\n        {...{\n          open: openDetailsModal,\n          title: `${application.name} details`,\n          onClose: () => setOpenDetailsModal(false),\n          size: 'lg'\n        }}\n      >\n        <ReactJson title='Application' src={application} name={false} />\n      </Modal>\n    </>\n  )\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/AgentDetails/index.js",["214"],"import React from 'react'\n\nimport ReactJson from '../../Utils/ReactJson'\nimport { Paper, Typography, makeStyles, Icon, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Button, useMediaQuery } from '@material-ui/core'\n\nimport { useData } from '../../providers/Data'\nimport { dateFormat, MiBFactor, fogTypes, icons, prettyBytes } from '../utils'\n\nimport getSharedStyle from '../sharedStyles'\n\nimport moment from 'moment'\nimport { useFeedback } from '../../Utils/FeedbackContext'\n\nimport MicroservicesTable from '../MicroservicesTable'\nimport Status from '../../Utils/Status'\nimport Modal from '../../Utils/Modal'\nimport EdgeResourceDetails from './EdgeResourceDetails'\n\nconst useStyles = makeStyles(theme => ({\n  ...getSharedStyle(theme)\n}))\n\nexport default function AgentDetails ({ agent: selectedAgent, selectApplication, selectMicroservice, back }) {\n  const { data, deleteAgent: _deleteAgent, toggleApplication: _toggleApplication, deleteApplication: _deleteApplication } = useData()\n  const { pushFeedback } = useFeedback()\n  const [openDeleteAgentDialog, setOpenDeleteAgentDialog] = React.useState(false)\n  const [openDeleteApplicationDialog, setOpenDeleteApplicationDialog] = React.useState(false)\n  const [selectedApplication, setSelectedApplication] = React.useState({})\n  const [openDetailsModal, setOpenDetailsModal] = React.useState(false)\n  const [openERDetailsModal, setOpenERDetailsModal] = React.useState(false)\n  const [selectedER, setSelectedER] = React.useState({})\n  const classes = useStyles()\n  const isMediumScreen = useMediaQuery('(min-width: 768px)')\n\n  const { msvcsPerAgent, controller, applications } = data\n  const agent = (controller.agents || []).find(a => selectedAgent.uuid === a.uuid) || selectedAgent // Get live updates from data\n  const applicationsByName = React.useMemo(() => {\n    return (msvcsPerAgent[agent.uuid] || []).reduce((acc, m) => {\n      if (acc[m.application]) { acc[m.application].microservices.push(m) } else {\n        acc[m.application] = {\n          microservices: [m],\n          application: applications.find(a => a.name === m.application)\n        }\n      }\n      return acc\n    }, {})\n  }, [msvcsPerAgent, agent])\n\n  const deleteAgent = async () => {\n    try {\n      const response = await _deleteAgent(selectedAgent)\n      if (response.ok) {\n        pushFeedback({ type: 'success', message: 'Agent deleted!' })\n        back()\n      } else {\n        pushFeedback({ type: 'error', message: response.status })\n      }\n    } catch (e) {\n      pushFeedback({ type: 'error', message: e.message || e.status })\n    }\n  }\n\n  const toggleApplication = async (app) => {\n    try {\n      const response = await _toggleApplication(app)\n      if (response.ok) {\n        app.isActivated = !app.isActivated\n        pushFeedback({ type: 'success', message: `Application ${app.isActivated ? 'Started' : 'Stopped'}!` })\n      } else {\n        pushFeedback({ type: 'error', message: response.status })\n      }\n    } catch (e) {\n      pushFeedback({ type: 'error', message: e.message || e.status })\n    }\n  }\n\n  const restartApplication = async (app) => {\n    await toggleApplication(app)\n    await toggleApplication(app)\n  }\n\n  const deleteApplication = async (app) => {\n    try {\n      const response = await _deleteApplication(app)\n      if (response.ok) {\n        pushFeedback({ type: 'success', message: 'Application Deleted!' })\n        setOpenDeleteApplicationDialog(false)\n        setSelectedApplication({})\n      } else {\n        pushFeedback({ type: 'error', message: response.status })\n      }\n    } catch (e) {\n      pushFeedback({ type: 'error', message: e.message || e.status })\n    }\n  }\n\n  const _getSeeDetailsMessage = (application) => {\n    if (application.application.microservices.lenght === application.microservices.lenght) {\n      return 'See application details >'\n    }\n    if (application.application.microservices.lenght < 2) {\n      return 'See application details >'\n    }\n    return `See all ${application.application.microservices.lenght} Msvcs for this app >`\n  }\n\n  const mainActions = (\n    <div className={classes.actions} style={{ minWidth: 'unset' }}>\n      <icons.DeleteIcon onClick={() => setOpenDeleteAgentDialog(true)} className={classes.action} title='Delete application' />\n    </div>\n  )\n\n  const detailActions = (\n    <div className={classes.actions} style={{ minWidth: 0 }}>\n      <icons.CodeIcon onClick={() => setOpenDetailsModal(true)} className={classes.action} title='Details' />\n    </div>\n  )\n\n  return (\n    <>\n      <Paper className={`section first ${classes.multiSections}`}>\n        <div className={[classes.section, 'paper-container-left', classes.bottomPad].join(' ')}>\n          <Typography variant='subtitle2' className={classes.title}>\n            <span>Status</span>\n            {!isMediumScreen && mainActions}\n          </Typography>\n          <span className={classes.text} style={{ display: 'flex', alignItems: 'center' }}><Status status={agent.daemonStatus} style={{ marginRight: '5px', marginTop: '-3px' }} />{agent.daemonStatus}</span>\n          {/* <span className={classes.subTitle} style={{ marginTop: '15px' }}>Last Active: <span className={classes.text}>{agent.lastStatusTime ? moment(agent.lastStatusTime).format(dateFormat) : '--'}</span></span> */}\n        </div>\n        <div className={classes.sectionDivider} />\n        <div className={[classes.section].join(' ')} style={{ paddingBottom: '15px' }}>\n          <Typography variant='subtitle2' className={classes.title}>\n            <span>Last Active</span>\n          </Typography>\n          <span className={classes.text}>{agent.lastStatusTime ? moment(agent.lastStatusTime).format(dateFormat) : '--'}</span>\n        </div>\n        <div className={classes.sectionDivider} />\n        <div className={[classes.section, 'paper-container-right'].join(' ')} style={{ paddingBottom: '15px' }}>\n          <Typography variant='subtitle2' className={classes.title}>\n            <span>Description</span>\n            {isMediumScreen && mainActions}\n          </Typography>\n          <span className={classes.text}>{agent.description}</span>\n        </div>\n      </Paper>\n      <Paper className={`section ${classes.multiSections}`}>\n        <div className={[classes.section, 'paper-container-left', classes.bottomPad].join(' ')}>\n          <Typography variant='subtitle2' className={classes.title}>\n            <span>Agent Details</span>\n            {!isMediumScreen && detailActions}\n          </Typography>\n          <div className={classes.subSection}>\n            <span className={classes.subTitle}>Version</span>\n            <span className={classes.text}>{agent.version}</span>\n          </div>\n          <div className={classes.subSection}>\n            <span className={classes.subTitle}>Type</span>\n            <span className={classes.text}>{fogTypes[agent.fogTypeId]}</span>\n          </div>\n          <div className={classes.subSection}>\n            <span className={classes.subTitle}>Address</span>\n            <span className={classes.text}>{agent.host || agent.ipAddressExternal || agent.ipAddress}</span>\n          </div>\n          <div className={classes.subSection} style={{ paddingBottom: 0 }}>\n            <span className={classes.subTitle}>Created</span>\n            <span className={classes.text}>{moment(agent.createdAt).format(dateFormat)}</span>\n          </div>\n        </div>\n        <div className={classes.sectionDivider} />\n        <div className={classes.section}>\n          <Typography variant='subtitle2' className={classes.title}>Resource Utilization</Typography>\n          <div className={classes.subSection}>\n            <span className={classes.subTitle}>CPU Usage</span>\n            <span className={classes.text}>{(agent.cpuUsage * 1).toFixed(2) + '%'}</span>\n          </div>\n          <div className={classes.subSection}>\n            <span className={classes.subTitle}>Memory Usage</span>\n            <span className={classes.text}>{`${prettyBytes((agent.memoryUsage * MiBFactor))} / ${prettyBytes((agent.systemAvailableMemory))} (${((agent.memoryUsage * MiBFactor / agent.systemAvailableMemory * 100) || 0).toFixed(2)}%)`}</span>\n          </div>\n          <div className={classes.subSection}>\n            <span className={classes.subTitle}>Disk Usage</span>\n            <span className={classes.text}>{`${prettyBytes((agent.diskUsage * MiBFactor))} / ${prettyBytes((agent.systemAvailableDisk))} (${((agent.diskUsage * MiBFactor / agent.systemAvailableDisk * 100) || 0).toFixed(2)}%)`}</span>\n          </div>\n        </div>\n        <div className={classes.sectionDivider} />\n        <div className={[classes.section, 'paper-container-right'].join(' ')} style={{ paddingBottom: '15px' }}>\n          <Typography variant='subtitle2' className={classes.title}>\n            <span>Edge Resources</span>\n            {isMediumScreen && detailActions}\n          </Typography>\n          {agent.edgeResources.map(er => (\n            <div key={`${er.name}_${er.version}`} className={classes.edgeResource}>\n              <div className={classes.erIconContainer} style={{ '--color': 'white' }}>\n                {er.display && er.display.icon && <Icon title={er.display.name || er.name} className={classes.erIcon}>{er.display.icon}</Icon>}\n              </div>\n              <div className={`${classes.text} ${classes.action}`} onClick={() => { setSelectedER(er); setOpenERDetailsModal(true) }} style={{ marginLeft: '5px' }}>{(er.display && er.display.name) || er.name} {er.version}</div>\n            </div>\n          ))}\n        </div>\n      </Paper>\n      {Object.keys(applicationsByName).map(applicationName => (\n        <Paper key={applicationName} className='section' style={{ paddingBottom: 0 }}>\n          <div className='section-container'>\n            <div className={[classes.section, classes.cardTitle, 'paper-container-left', 'paper-container-right'].join(' ')}>\n              <Typography variant='subtitle2' className={classes.title}>\n                <span className={[classes.stickyLeft, classes.textEllipsis].join(' ')} title={applicationName}>{applicationName}</span>\n                <div className={[classes.actions, 'sticky-right'].join(' ')} style={{ minWidth: '100px' }}>\n                  <icons.DeleteIcon className={classes.action} title='Delete application' onClick={() => { setSelectedApplication(applicationsByName[applicationName].application); setOpenDeleteApplicationDialog(true) }} />\n                  {applicationsByName[applicationName].application.isActivated\n                    ? <icons.RestartIcon className={classes.action} onClick={() => restartApplication(applicationsByName[applicationName].application)} title='Restart application' />\n                    : <icons.RestartIcon className={classes.disabledAction} title='Restart application' />}\n                  {applicationsByName[applicationName].application.isActivated\n                    ? <icons.StopIcon className={classes.action} onClick={() => toggleApplication(applicationsByName[applicationName].application)} title='Stop application' />\n                    : <icons.PlayIcon className={classes.action} onClick={() => toggleApplication(applicationsByName[applicationName].application)} title='Start application' />}\n                </div>\n              </Typography>\n            </div>\n            <MicroservicesTable\n              nameTitle='Msvc Name'\n              application={applicationsByName[applicationName]}\n              selectMicroservice={selectMicroservice}\n              showVolumes\n            />\n            <div\n              style={{\n                textAlign: 'right',\n                fontSize: '16px',\n                fontWeight: '300',\n                paddingTop: '30px',\n                paddingBottom: '15px',\n                fontStyle: 'italic',\n                position: 'sticky',\n                bottom: '0',\n                right: '15px',\n                float: 'right',\n                zIndex: 6,\n                backgroundColor: 'white'\n              }}\n            >\n              <span className={classes.action} onClick={() => selectApplication(applicationsByName[applicationName].application)}>{_getSeeDetailsMessage(applicationsByName[applicationName])}</span>\n            </div>\n          </div>\n        </Paper>\n      ))}\n      <Dialog\n        open={openDeleteAgentDialog}\n        onClose={() => { setOpenDeleteAgentDialog(false) }}\n      >\n        <DialogTitle id='alert-dialog-title'>Delete {agent.name}?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            <span>Deleting an agent will delete all its microservices.</span><br />\n            <span>This is not reversible.</span>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenDeleteAgentDialog(false)}>\n            Cancel\n          </Button>\n          <Button onClick={() => deleteAgent()} color='secondary' autoFocus>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog\n        open={openDeleteApplicationDialog}\n        onClose={() => { setOpenDeleteApplicationDialog(false) }}\n      >\n        <DialogTitle id='alert-dialog-title'>Delete {selectedApplication.name}?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            <span>Deleting an Application will delete all its microservices.</span><br />\n            <span>This is not reversible.</span>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenDeleteApplicationDialog(false)}>\n            Cancel\n          </Button>\n          <Button onClick={() => deleteApplication(selectApplication)} color='secondary' autoFocus>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Modal\n        {...{\n          open: openERDetailsModal,\n          title: `${selectedER.name} details`,\n          onClose: () => setOpenERDetailsModal(false),\n          size: 'lg'\n        }}\n      >\n        <EdgeResourceDetails edgeResource={selectedER} />\n      </Modal>\n      <Modal\n        {...{\n          open: openDetailsModal,\n          title: `${agent.name} details`,\n          onClose: () => setOpenDetailsModal(false),\n          size: 'lg'\n        }}\n      >\n        <ReactJson title='Agent' src={agent} name={false} />\n      </Modal>\n    </>\n  )\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/Catalog/Application/index.js",["215"],"import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport ReactJson from '../../Utils/ReactJson'\nimport yaml from 'js-yaml'\nimport { Menu, MenuItem, Divider } from '@material-ui/core'\n\nimport { ControllerContext } from '../../ControllerProvider'\nimport { FeedbackContext } from '../../Utils/FeedbackContext'\nimport Modal from '../../Utils/Modal'\nimport CatalogTable from './CatalogTable'\nimport Confirm from '../../Utils/Confirm'\nimport DeployApplicationTemplate from './DeployApplicationTemplate'\n\nimport lget from 'lodash/get'\nimport { parseMicroservice } from '../../Utils/ApplicationParser'\n\nconst useStyles = makeStyles(theme => ({\n  pointer: {\n    cursor: 'pointer'\n  },\n  container: {\n    padding: '10px 50px 10px 30px'\n  },\n  flexColumn: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  titleRow: {\n    marginBottom: '30px'\n  }\n}))\n\nconst parseApplication = async (applicationYAML) => {\n  return {\n    ...applicationYAML,\n    microservices: await Promise.all((applicationYAML.microservices || []).map(async m => parseMicroservice(m)))\n  }\n}\n\nconst parseApplicationTemplate = async (doc) => {\n  if (doc.apiVersion !== 'iofog.org/v2') {\n    return [{}, `Invalid API Version ${doc.apiVersion}, current version is iofog.org/v2`]\n  }\n  if (doc.kind !== 'ApplicationTemplate') {\n    return [{}, `Invalid kind ${doc.kind}`]\n  }\n  if (!doc.metadata || !doc.spec) {\n    return [{}, 'Invalid YAML format']\n  }\n  const application = await parseApplication(lget(doc, 'spec.application', {}))\n  const applicationTemplate = {\n    name: lget(doc, 'metadata.name', lget(doc, 'spec.name', undefined)),\n    description: lget(doc, 'spec.description', ''),\n    application,\n    variables: lget(doc, 'spec.variables', [])\n  }\n\n  return [applicationTemplate]\n}\n\nexport default function Catalog () {\n  const classes = useStyles()\n  const [openDetailsModal, setOpenDetailsModal] = React.useState(false)\n  const [openDeployModal, setOpenDeployModal] = React.useState(false)\n  const [openRemoveConfirm, setOpenRemoveConfirm] = React.useState(false)\n  const [fetching, setFetching] = React.useState(true)\n  const [loading, setLoading] = React.useState(false)\n  const [catalog, setCatalog] = React.useState([])\n  const [selectedItem, setSelectedItem] = React.useState({})\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState(null)\n  const { request } = React.useContext(ControllerContext)\n  const { pushFeedback } = React.useContext(FeedbackContext)\n\n  const handleCloseMenu = () => setMenuAnchorEl(null)\n  const openMenu = (item, e) => {\n    setSelectedItem(item)\n    setMenuAnchorEl(e.currentTarget)\n  }\n  const openDetails = () => {\n    setOpenDetailsModal(true)\n    handleCloseMenu()\n  }\n  const openDeploy = () => {\n    setOpenDeployModal(true)\n    handleCloseMenu()\n  }\n  const openRemove = () => {\n    setOpenRemoveConfirm(true)\n    handleCloseMenu()\n  }\n\n  function mapApplicationTemplate (item) {\n    return {\n      display: {\n        microservices: lget(item, 'application.microservices', []).map(m => m.name),\n        variables: lget(item, 'variables', []).map(m => m.key)\n      },\n      ...item\n    }\n  }\n\n  async function fetchCatalog () {\n    try {\n      setFetching(true)\n      const catalogItemsResponse = await request('/api/v3/applicationTemplates')\n      if (!catalogItemsResponse.ok) {\n        pushFeedback({ message: catalogItemsResponse.statusText, type: 'error' })\n        setFetching(false)\n        return\n      }\n      const catalogItems = (await catalogItemsResponse.json()).applicationTemplates\n      setCatalog(catalogItems.map(item => mapApplicationTemplate(item)))\n      setFetching(false)\n    } catch (e) {\n      pushFeedback({ message: e.message, type: 'error' })\n      setFetching(false)\n    }\n  }\n\n  React.useEffect(() => {\n    fetchCatalog()\n  }, [])\n\n  const addCatalogItem = async (item) => {\n    const newItem = { ...item }\n    setLoading(true)\n    const response = await request(`/api/v3/applicationTemplate/${newItem.name}`, {\n      method: 'PUT',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newItem)\n    })\n    if (response.ok) {\n      pushFeedback({ message: 'Catalog Updated!', type: 'success' })\n      newItem.id = (await response.json()).id\n      setCatalog([mapApplicationTemplate(newItem), ...catalog.filter(i => i.id !== newItem.id)])\n      setLoading(false)\n    } else {\n      pushFeedback({ message: response.statusText, type: 'error' })\n      setLoading(false)\n    }\n  }\n\n  const removeCatalogItem = async (item) => {\n    try {\n      setLoading(true)\n      const res = await request(`/api/v3/applicationTemplate/${item.name}`, {\n        method: 'DELETE'\n      })\n      if (!res.ok) {\n        pushFeedback({ message: res.statusText, type: 'error' })\n      } else {\n        setCatalog(catalog.filter(i => i.id !== item.id))\n        pushFeedback({ message: 'Application template deleted', type: 'success' })\n      }\n      setLoading(false)\n    } catch (e) {\n      pushFeedback({ message: e.message, type: 'error', uuid: 'error' })\n      setLoading(false)\n    }\n  }\n\n  const readCatalogItemFile = async (item) => {\n    const file = item.files[0]\n    if (file) {\n      const reader = new window.FileReader()\n\n      reader.onload = async function (evt) {\n        try {\n          const doc = yaml.safeLoad(evt.target.result)\n          const [catalogItem, err] = await parseApplicationTemplate(doc)\n          if (err) {\n            return pushFeedback({ message: err, type: 'error' })\n          }\n          addCatalogItem(catalogItem)\n        } catch (e) {\n          console.error({ e })\n          pushFeedback({ message: 'Could not parse the file', type: 'error' })\n        }\n      }\n\n      reader.onerror = function (evt) {\n        pushFeedback({ message: evt, type: 'error' })\n      }\n\n      reader.readAsText(file, 'UTF-8')\n    }\n  }\n\n  const getDetails = (selectedItem) => {\n    const detailsObj = { ...selectedItem }\n    delete detailsObj.display\n    return detailsObj\n  }\n\n  return (\n    <>\n      <div className={classes.container}>\n        <CatalogTable {...{ loading: fetching, uploading: loading, openMenu, catalog, readCatalogItemFile }} />\n      </div>\n      <Modal\n        {...{\n          open: openDetailsModal,\n          title: `${selectedItem.name} details`,\n          onClose: () => setOpenDetailsModal(false),\n          size: 'lg'\n        }}\n      >\n        <ReactJson title='Application template' src={getDetails(selectedItem)} name={false} />\n      </Modal>\n      <Modal\n        {...{\n          open: openDeployModal,\n          title: `Deploy ${selectedItem.name}`,\n          onClose: () => setOpenDeployModal(false)\n        }}\n      >\n        <DeployApplicationTemplate template={selectedItem} close={() => setOpenDeployModal(false)} />\n      </Modal>\n      <Confirm\n        open={openRemoveConfirm}\n        title={`Delete Application template ${selectedItem.name} ?`}\n        onClose={() => setOpenRemoveConfirm(false)}\n        confirmColor='secondary'\n        onConfirm={() => {\n          removeCatalogItem(selectedItem)\n          setOpenRemoveConfirm(false)\n        }}\n      >\n        <span>This is not reversible.</span>\n      </Confirm>\n      <Menu\n        id='catalog-menu'\n        anchorEl={menuAnchorEl}\n        keepMounted\n        open={Boolean(menuAnchorEl)}\n        onClose={handleCloseMenu}\n      >\n        <MenuItem onClick={openDeploy}>Deploy</MenuItem>\n        <MenuItem onClick={openDetails}>Details</MenuItem>\n        <Divider />\n        <MenuItem onClick={openRemove}>Remove item</MenuItem>\n      </Menu>\n    </>\n  )\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Default/index.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/utils.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/SearchBar.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/ApplicationParser.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/constants.js",["216"],"export const API_VERSIONS = ['iofog.org/v1', 'iofog.org/v2']\nexport default {\n  API_VERSIONS\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/Tabs.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/FileDrop.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Default/ActiveResources.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/Status.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Catalog/Application/DeployApplicationTemplate.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/Confirm.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Catalog/Application/CatalogTable.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/Utils/ReactJson.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/AgentDetails/EdgeResourceDetails.js",["217"],"import React from 'react'\nimport ReactJson from '../../Utils/ReactJson'\nimport { useController } from '../../ControllerProvider'\nimport { useFeedback } from '../../Utils/FeedbackContext'\n\nexport default function EdgeResourceDetails ({ edgeResource: _edgeResource }) {\n  const { request } = useController()\n  const { pushFeedback } = useFeedback()\n  const [edgeResource, setEdgeResource] = React.useState(_edgeResource)\n  React.useEffect(() => {\n    async function fetchData () {\n      try {\n        const res = await request(`/api/v3/edgeResource/${edgeResource.name}/${edgeResource.version}`)\n        if (res.ok) {\n          setEdgeResource(await res.json())\n        } else {\n          try {\n            const message = (await res.json()).message\n            pushFeedback({ message, type: 'error' })\n          } catch (e) {\n            pushFeedback({ message: res.statusText, type: 'error' })\n          }\n        }\n      } catch (e) {\n        pushFeedback({ message: e.message, type: 'error' })\n      }\n    }\n    fetchData()\n  }, [])\n  return <ReactJson title='Edge Resource' src={edgeResource} name={false} />\n}\n","/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/sharedStyles/index.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Default/ApplicationList/index.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/Default/AgentList/index.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/MicroservicesTable/index.js",[],"/Users/tianxingyu/ecn3/ECN-Viewer/src/ECNViewer/myleaflet.js",["218"],{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":13,"column":12,"nodeType":"225","messageId":"226","endLine":13,"endColumn":17},{"ruleId":"227","severity":1,"message":"228","line":91,"column":6,"nodeType":"229","endLine":91,"endColumn":16,"suggestions":"230"},{"ruleId":"231","severity":1,"message":"232","line":99,"column":17,"nodeType":"233","messageId":"234","endLine":99,"endColumn":23},{"ruleId":"227","severity":1,"message":"235","line":163,"column":6,"nodeType":"229","endLine":163,"endColumn":31,"suggestions":"236"},{"ruleId":"227","severity":1,"message":"237","line":80,"column":6,"nodeType":"229","endLine":80,"endColumn":8,"suggestions":"238"},{"ruleId":"239","severity":1,"message":"240","line":13,"column":1,"nodeType":"241","endLine":16,"endColumn":2},{"ruleId":"239","severity":1,"message":"240","line":26,"column":1,"nodeType":"241","endLine":30,"endColumn":2},{"ruleId":"227","severity":1,"message":"242","line":37,"column":6,"nodeType":"229","endLine":37,"endColumn":13,"suggestions":"243"},{"ruleId":"227","severity":1,"message":"244","line":81,"column":6,"nodeType":"229","endLine":81,"endColumn":17,"suggestions":"245"},{"ruleId":"227","severity":1,"message":"246","line":102,"column":6,"nodeType":"229","endLine":102,"endColumn":15,"suggestions":"247"},{"ruleId":"231","severity":1,"message":"248","line":1,"column":17,"nodeType":"233","messageId":"234","endLine":1,"endColumn":26},{"ruleId":"231","severity":1,"message":"249","line":3,"column":8,"nodeType":"233","messageId":"234","endLine":3,"endColumn":22},{"ruleId":"231","severity":1,"message":"250","line":4,"column":10,"nodeType":"233","messageId":"234","endLine":4,"endColumn":16},{"ruleId":"231","severity":1,"message":"251","line":5,"column":8,"nodeType":"233","messageId":"234","endLine":5,"endColumn":16},{"ruleId":"231","severity":1,"message":"252","line":6,"column":8,"nodeType":"233","messageId":"234","endLine":6,"endColumn":12},{"ruleId":"231","severity":1,"message":"253","line":9,"column":10,"nodeType":"233","messageId":"234","endLine":9,"endColumn":21},{"ruleId":"231","severity":1,"message":"254","line":86,"column":9,"nodeType":"233","messageId":"234","endLine":86,"endColumn":14},{"ruleId":"231","severity":1,"message":"255","line":87,"column":49,"nodeType":"233","messageId":"234","endLine":87,"endColumn":62},{"ruleId":"256","severity":1,"message":"257","line":104,"column":17,"nodeType":"258","messageId":"259","endLine":104,"endColumn":19},{"ruleId":"231","severity":1,"message":"260","line":111,"column":19,"nodeType":"233","messageId":"234","endLine":111,"endColumn":27},{"ruleId":"256","severity":1,"message":"257","line":120,"column":17,"nodeType":"258","messageId":"259","endLine":120,"endColumn":19},{"ruleId":"261","severity":1,"message":"262","line":91,"column":13,"nodeType":"263","messageId":"264","endLine":98,"endColumn":14},{"ruleId":"227","severity":1,"message":"265","line":138,"column":93,"nodeType":"229","endLine":138,"endColumn":106,"suggestions":"266"},{"ruleId":"227","severity":1,"message":"267","line":47,"column":6,"nodeType":"229","endLine":47,"endColumn":28,"suggestions":"268"},{"ruleId":"227","severity":1,"message":"269","line":122,"column":6,"nodeType":"229","endLine":122,"endColumn":8,"suggestions":"270"},{"ruleId":"239","severity":1,"message":"240","line":2,"column":1,"nodeType":"241","endLine":4,"endColumn":2},{"ruleId":"227","severity":1,"message":"271","line":29,"column":6,"nodeType":"229","endLine":29,"endColumn":8,"suggestions":"272"},{"ruleId":"227","severity":1,"message":"273","line":63,"column":6,"nodeType":"229","endLine":63,"endColumn":8,"suggestions":"274"},"no-native-reassign",["275"],"no-negated-in-lhs",["276"],"no-redeclare","'fetch' is already defined as a built-in global variable.","Block","redeclaredAsBuiltin","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'refreshData'. Either include it or remove the dependency array.","ArrayExpression",["277"],"no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","React Hook React.useMemo has a missing dependency: 'authenticate'. Either include it or remove the dependency array. Mutable values like 'tokenRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["278"],"React Hook React.useEffect has a missing dependency: '_fetchConfig'. Either include it or remove the dependency array.",["279"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook React.useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array.",["280"],"React Hook React.useEffect has a missing dependency: 'returnHomeCBRef'. Either include it or remove the dependency array.",["281"],"React Hook React.useEffect has missing dependencies: 'data.activeAgents', 'location', and 'setMap'. Either include them or remove the dependency array.",["282"],"'useEffect' is defined but never used.","'GoogleMapReact' is defined but never used.","'Avatar' is defined but never used.","'CtrlIcon' is defined but never used.","'Icon' is defined but never used.","'statusColor' is defined but never used.","'theme' is assigned a value but never used.","'selectedAgent' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Mymarker' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook React.useMemo has a missing dependency: '_getApplicationYAMLFromJSON'. Either include it or remove the dependency array.",["283"],"React Hook React.useMemo has a missing dependency: 'applications'. Either include it or remove the dependency array.",["284"],"React Hook React.useEffect has a missing dependency: 'fetchCatalog'. Either include it or remove the dependency array.",["285"],"React Hook React.useEffect has missing dependencies: 'edgeResource.name', 'edgeResource.version', 'pushFeedback', and 'request'. Either include them or remove the dependency array.",["286"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["287"],"no-global-assign","no-unsafe-negation",{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},"Update the dependencies array to be: [location, refreshData]",{"range":"310","text":"311"},"Update the dependencies array to be: [error, authenticate]",{"range":"312","text":"313"},"Update the dependencies array to be: [_fetchConfig]",{"range":"314","text":"315"},"Update the dependencies array to be: [callback, delay]",{"range":"316","text":"317"},"Update the dependencies array to be: [returnHomeCBRef, seeAllECN]",{"range":"318","text":"319"},"Update the dependencies array to be: [data.activeAgents, loading, location, setMap]",{"range":"320","text":"321"},"Update the dependencies array to be: [_getApplicationYAMLFromJSON, application]",{"range":"322","text":"323"},"Update the dependencies array to be: [msvcsPerAgent, agent.uuid, applications]",{"range":"324","text":"325"},"Update the dependencies array to be: [fetchCatalog]",{"range":"326","text":"327"},"Update the dependencies array to be: [edgeResource.name, edgeResource.version, pushFeedback, request]",{"range":"328","text":"329"},"Update the dependencies array to be: [props]",{"range":"330","text":"331"},[2232,2242],"[location, refreshData]",[4803,4828],"[error, authenticate]",[1962,1964],"[_fetchConfig]",[802,809],"[callback, delay]",[2420,2431],"[returnHomeCBRef, seeAllECN]",[2884,2893],"[data.activeAgents, loading, location, setMap]",[4665,4678],"[_getApplicationYAMLFromJSON, application]",[2168,2190],"[msvcsPerAgent, agent.uuid, applications]",[3799,3801],"[fetchCatalog]",[1031,1033],"[edgeResource.name, edgeResource.version, pushFeedback, request]",[2195,2197],"[props]"]